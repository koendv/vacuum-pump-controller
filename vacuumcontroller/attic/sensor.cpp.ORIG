#include "sensor.h"
#include "motor.h"
#include "settings.h"
#include <math.h>

#include <Adafruit_BMP280.h>
//#include <Adafruit_BME280.h>
//#include <Adafruit_BME680.h>
#include "breathing_led.h"

#define SIMULATION

// Chip selects for the four BMP280 headers
#define H1_CS PB12
#define H2_CS PA8
#define H3_CS PB11
#define H4_CS PB10

// pins for SPI bus 2
#define SCK2  PB13
#define MOSI2 PB15
#define MISO2 PB14

// pins for SPI bus 3
#define SCK3  PB3
#define MOSI3 PB5
#define MISO3 PB4

namespace sensor {
  double vacuum;
  int lastMillis = 0;
  int sampleTime = 100;
  double pressure[NUM_SENSOR];
  bool status[NUM_SENSOR];

  SPIClass SPITwo(MOSI2, MISO2, SCK2);
  //SPIClass SPIThree(MOSI3, MISO3, SCK3);      // hardware SPI3 on STM32F411

  Adafruit_BMP280 sensor[NUM_SENSOR] {
    Adafruit_BMP280(H1_CS, &SPITwo),            // hardware SPI2
    Adafruit_BMP280(H2_CS, &SPITwo),            // hardware SPI2
    Adafruit_BMP280(H3_CS, MOSI3, MISO3, SCK3), // software SPI3 on STM32F103
    Adafruit_BMP280(H4_CS, MOSI3, MISO3, SCK3)  // software SPI3 on STM32F103
  };

  void setSampleTime(int millis) {
    if (millis > 0) sampleTime = millis;
  }

  // soft reset
  void reset() {
    for (int i = 0; i < NUM_SENSOR; i++)
      sensor[i].reset();
  }

#ifdef SIMULATION

  /* simulate sensor and vacuum vessel */
  void readSensor() {
    static int lastSensorMillis = 0;
    int now = millis();
    float delta_t = (now - lastSensorMillis)/1000;
    lastSensorMillis = now;

    double motor = 0.0, valve = 0.0;
    const double deadZone = MAXPWM/5.0; // pump does not turn if voltage too low
    if (motor::pwma > deadZone) motor = (motor::pwma-deadZone)/(MAXPWM-deadZone);
    valve = motor::getswitch(2);
    double steadystate = motor * 1000 - valve * 500;
    if (steadystate < 0.0) steadystate = 0.0;

    for (int i = 0; i < NUM_SENSOR; i++)
      pressure[i] = 0.0;
    vacuum = vacuum + (steadystate - vacuum) / 40.0;
  }

#else

  void readSensor() {
    for (int i = 0; i < NUM_SENSOR; i++)
      if (status[i])
        pressure[i] = sensor[i].readPressure() / 100.0F;

    vacuum = pressure[1]] - pressure[0]; // pressure[0]] = atmospheric, pressure[1]] = vacuum vessel

    if (isnan(pressure[0]]) || isnan(pressure[1])) breathingLed::blink();
  }

#endif

  void setup() {
    Serial.print("sensors ");
    for (int i = 0; i < NUM_SENSOR; i++) {
      status[i] = sensor[i].begin();
      Serial.print( status[i] ? "ok " : "- ");
    }
    Serial.println();
    if (!(status[0] && status[1])) breathingLed::blink();
  }

  void loop() {
    int now =  millis();
    if ((now < lastMillis) || (now - lastMillis > sampleTime)) {
      readSensor();
      lastMillis = now;
      if (settings::logging) {
        Serial.print('\t');
        Serial.print(now);
        Serial.print('\t');
        Serial.print(motor::pwma_percent);
        Serial.print('\t');
        for (int i = 0; i < NUM_SENSOR; i++) {
          Serial.print(pressure[i]);
          Serial.print('\t');
        }
        Serial.println();
      }
    }
  }
}

// not truncated
